<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hailey Gryka</title>
    <link>/</link>
    <description>Recent content on Hailey Gryka</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Jan 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RSS Feed</title>
      <link>/2021/01/22/rss-feed/</link>
      <pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/01/22/rss-feed/</guid>
      <description>Having a summary of newsfeeds can be useful for a multitude of reasons. Such a summary can reduce the amount of time one spends intaking media content or such techniques could be used for finding articles of interest related to specific topics. Herein is an example of creating a summary of articles from a multitude of sources, including Nature, Science Daily, and Wired.
titledatelinkdescriptionhashGlobal absence and targeting of protective immune states in severe COVID-192021-01-25 00:00:00http://feeds.</description>
    </item>
    
    <item>
      <title>Keyword Identifier</title>
      <link>/2021/01/07/keywordidentifier/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/01/07/keywordidentifier/</guid>
      <description>Keyword and Summary GeneratorIn the process of creating a Knowledge Management System, a notable amount of time is spent reading and compiling keywords and summaries for the documents of interest. To optimize this process and reduce the time committment for creating a KMS, NLP techniques are useful.
Below, an article pdf or url may be entered to obtain the top 10 keywords from the article, top 10 important phrases from the article, a summary of the article, and the number of pages (for a pdf only).</description>
    </item>
    
    <item>
      <title>Movie Recommendation System</title>
      <link>/2020/09/15/movie-recommendation-system/</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/09/15/movie-recommendation-system/</guid>
      <description>Movie Recommendation SystemI was recently inspired to create a movie recommendation system when a family member started hosting movie nights during the pandemic. There are some diverse tastes amongst the group of attenties so utilizing multiple genres and movies was a benefit for this project.
This post is a final product of a descent bit of initial data exploration, preprocessing, and similarity testing. Ultimately, the recommenderlab package was extremely helpful, although, I also explored tm and some of the statistical methods available through that package.</description>
    </item>
    
    <item>
      <title>Beautiful R Plots</title>
      <link>/2020/08/16/beautiful-r-plots/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/08/16/beautiful-r-plots/</guid>
      <description>The R language is fantastic for quickly turning data into plots, however, it is not commonly used for creating visual aids for presentation or publication figures. While it is more common to produce final figures with other software, the same quality figures can be created in R.
Herein I show several examples of plots, that I have re-created using R, in an aesthetically similar manner. In each example, I provide the original figure and then the R-code I used for replication, followed by the replicate figure.</description>
    </item>
    
    <item>
      <title>COVID-19 Data Monitoring</title>
      <link>/2020/08/11/covid-19-data-monitoring/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/08/11/covid-19-data-monitoring/</guid>
      <description>I recently began a project utilizing the incidence of COVID-19 in relation to other variables. In order to ensure my data is updated frequently enough, I wanted to have a method of monitoring COVID-19, real time, to see when any major changes occur. In order to achieve this, I built an interactive shiny app to monitor the data.
To build my shiny app, I am defining inputs as follows:* country: the name of the country* type: the type of case (i.</description>
    </item>
    
    <item>
      <title>Exploratory Data Analysis using Pandas Profiling</title>
      <link>/2020/08/04/eda/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/08/04/eda/</guid>
      <description>Exploratory Data Analysis (EDA) is an essential step in any data science project. This step allows us to remove unuseful/incorrect data, understand the relationships within the data, and provides context required to develop models that will ultimately allow for accurate interpretation of results. EDA can be a time consuming process and if shortcuts are taken, it will hurt the analysis in the long run. However, pandas-profiling is an extremely powerful python package that can help with this process.</description>
    </item>
    
    <item>
      <title>Use of dataMaid in Data Cleaning</title>
      <link>/2020/07/27/use-of-datamaid-in-data-cleaning/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/07/27/use-of-datamaid-in-data-cleaning/</guid>
      <description>IntroductionThere are multiple steps to completing a data science project. These steps are enumerated below.
Data CleaningExploratory Data AnalysisData VisualizationData ModelingCommunication of ResultsHerein, we will focus on methods for Data Cleaning. Data Cleaning is of the utmost importance since quality data is essential to making good conclusions from the data. Advantages of cleaning data include:- Improving the ability to make informed decisions- Save time and increase productivity- Minimize risk from predictive analysis later</description>
    </item>
    
    <item>
      <title>Plotting London Boroughs</title>
      <link>/2020/07/19/plotting-variables-london-boroughs/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/07/19/plotting-variables-london-boroughs/</guid>
      <description>IntroductionThis Rmarkdown document shows the use of both R and Python for analyzing the London Boroughs dataset. The reticulate library allows us to use Python code in an R environment.
Load LibrariesData IngestionWe can use Python code to read in the data.
import pandas as pdimport numpy as npimport matplotlib.pyplot as plturl_LondonHousePrices = &amp;quot;https://data.london.gov.uk/download/uk-house-price-index/70ac0766-8902-4eb5-aab5-01951aaed773/UK%20House%20price%20index.xls&amp;quot;properties = pd.read_excel(url_LondonHousePrices, sheet_name=&amp;#39;Average price&amp;#39;, index_col= None)properties.</description>
    </item>
    
    <item>
      <title>London Boroughs</title>
      <link>/2020/07/10/london-boroughs/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/07/10/london-boroughs/</guid>
      <description>HGryx-Boroughs/*!** Twitter Bootstrap**//*!* Bootstrap v3.3.7 (http://getbootstrap.com)* Copyright 2011-2016 Twitter, Inc.* Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)*//*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html {font-family: sans-serif;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;}body {margin: 0;}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary {display: block;}audio,canvas,progress,video {display: inline-block;vertical-align: baseline;}audio:not([controls]) {display: none;height: 0;}[hidden],template {display: none;}a {background-color: transparent;}a:active,a:hover {outline: 0;}abbr[title] {border-bottom: 1px dotted;}b,strong {font-weight: bold;}dfn {font-style: italic;}h1 {font-size: 2em;margin: 0.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Thu, 05 May 2016 21:48:51 -0700</pubDate>
      
      <guid>/about/</guid>
      <description>Welcome! This is my personal website.
Please feel free to reach out to me with any questions or comments!</description>
    </item>
    
    <item>
      <title>Creating a new theme</title>
      <link>/2016/01/01/creating-a-new-theme/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/01/01/creating-a-new-theme/</guid>
      <description>Overview Hugo is a static HTML and CSS website generator written in [Go][]. It is optimized for speed, easy use and configurability. Hugo takes a directory with content and templates and renders them into a full HTML website.
Hugo relies on Markdown files with front matter for meta data. And you can run Hugo from any directory. This works well for shared hosts and other systems where you donâ€™t have a privileged account.</description>
    </item>
    
    <item>
      <title>Lorem Ipsum</title>
      <link>/2015/01/01/lorem-ipsum/</link>
      <pubDate>Thu, 01 Jan 2015 13:09:13 -0600</pubDate>
      
      <guid>/2015/01/01/lorem-ipsum/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
    <item>
      <title>Archive</title>
      <link>/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archive/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>